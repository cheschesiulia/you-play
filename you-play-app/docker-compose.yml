version: "3.8"

services:
  frontend:
    image: frontend:latest
    ports:
      - "3000:80"
    networks:
      - auth-net
      - streaming-net
      - playlist-net
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker

  kong:
    image: kong:latest
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8001:8001"
    networks:
      - auth-net
      - streaming-net
      - playlist-net
    volumes:
      - ./kong.yml:/usr/local/kong/declarative/kong.yml
    restart: always
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  auth-service:
    image: auth-service:latest
    ports:
      - "8002:8000"
    depends_on:
      - auth-db
    environment:
      - POSTGRES_USER=iuliasiangh
      - POSTGRES_PASSWORD=parolanoastra
      - POSTGRES_DB=auth_db
      - POSTGRES_PORT=5432
      - DATABASE_URL=postgresql://iuliasiangh:parolanoastra@auth-db:5432/auth_db
      - SECRET_KEY=iuliasupersecretangh
      - ALGORITHM=HS256
    networks:
      - auth-net
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker

  auth-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=iuliasiangh
      - POSTGRES_PASSWORD=parolanoastra
      - POSTGRES_DB=auth_db
      - POSTGRES_PORT=5432
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - auth-net
    ports:
      - "5433:5432"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  adminer:
    image: adminer
    ports:
      - "8080:8080"
    networks:
      - auth-net
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  streaming-service:
    image: streaming-service:latest
    ports:
      - "8003:8000"
    environment:
      - MINIO_ENDPOINT=http://gemdekaise.go.ro:9007
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=admin123
      - MINIO_BUCKET=melodii
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - SECRET_KEY=iuliasupersecretangh
      - ALGORITHM=HS256
    networks:
      - streaming-net
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker

  playlist-service:
    image: playlist-service:latest
    ports:
      - "8004:8000"
    depends_on:
      - playlist-db
    environment:
      - POSTGRES_USER=iuliasiangh
      - POSTGRES_PASSWORD=parolanoastra
      - POSTGRES_DB=playlist_db
      - POSTGRES_PORT=5432
      - SECRET_KEY=iuliasupersecretangh
      - ALGORITHM=HS256
      - ENVIRONMENT=test
    networks:
      - playlist-net
      - streaming-net
    restart: on-failure
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker

  playlist-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=iuliasiangh
      - POSTGRES_PASSWORD=parolanoastra
      - POSTGRES_DB=playlist_db
      - POSTGRES_PORT=5432
    volumes:
      - playlist-db-data:/var/lib/postgresql/data
    networks:
      - playlist-net
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iuliasiangh -d playlist_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

volumes:
  auth-db-data:
  playlist-db-data:

networks:
  auth-net:
  streaming-net:
  playlist-net:
